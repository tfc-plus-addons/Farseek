import groovy.json.JsonBuilder
import groovy.json.JsonOutput

def modName = project.name
def modId = modName.toLowerCase()

// ---------------------------------------------------------------------------------------------------------------------
// Update
// ---------------------------------------------------------------------------------------------------------------------
apply plugin: "scala"
apply plugin: "forge"
minecraft {
    //version = forgeRevision
    version = "1.7.10-10.13.4.1558-1.7.10"
    runDir = "run"
    // If testing standalone Farseek add JVM arg "-Dfml.coreMods.load=farseek.core.FarseekCoreMod" to Client/Server run configurations
}

task addLibraryTransformers {
    fileTree(dir: "libs", include: "*.jar").each { File jar ->
        zipTree(jar).each { File file ->
            if(file.name.endsWith("_at.cfg")) {
                println("Found AccessTransformer in library: ${file.name}")
                deobfBinJar.addTransformer(file)
                deobfuscateJar.addTransformer(file)
            }
        }
    }
}

def modAuthorList = ["devlr"]
def modDependencyList = modDependencies.equals("")? []: modDependencies.split(";")
def modOptionalDependencyList = modOptionalDependencies.equals("")? []: modOptionalDependencies.split(";")
ext.writeJsonFile = { File dir, String name, Object contents ->
    dir.mkdirs()
    new File(dir, name).text = JsonOutput.prettyPrint(new JsonBuilder(contents).toString())
}
task modInfo { writeJsonFile(sourceSets.main.resources.srcDirs[0], "mcmod.info", [{
    modid        modId
    version      modVersion
    name         modName
    description  modDescription
    url          modUrl
    authorList   modAuthorList
    requiredMods modDependencyList
    dependencies modOptionalDependencyList
    useDependencyInformation true
}])}

tasks.setupDecompWorkspace.dependsOn(addLibraryTransformers, modInfo)

apply plugin: "idea"
idea.module.excludeDirs += files(".idea", "gradle", "libs", "run")

// ---------------------------------------------------------------------------------------------------------------------
// Build
// ---------------------------------------------------------------------------------------------------------------------
String mcVersion = minecraft.version
version = "$mcVersion-$modVersion"

jar.manifest.attributes "FMLAT": "${modId}_at.cfg"

task srcJar(type: Jar) {
    classifier = "src"
    from sourceSets.main.allSource
    from "common.gradle"
}

task deobfJar(type: Jar) {
    classifier = "deobf"
    from sourceSets.main.output
    from "common.gradle"
    manifest = jar.manifest
}

tasks.jar.dependsOn(srcJar, deobfJar)
